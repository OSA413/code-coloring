//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeColoring_Tests {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class CodeSamples {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CodeSamples() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CodeColoring_Tests.Python.CodeSamples", typeof(CodeSamples).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #Splits 3DS&apos; MPO into two JPGs with &quot;_L&quot; and &quot;_R&quot; postfix
        ///#Because this program is too simple I release it under the CC0 license
        ///#https://github.com/OSA413/Garbage
        ///
        ///import sys
        ///
        ///file_name = &quot;&quot;
        ///if (len(sys.argv) == 1):
        ///    print(&quot;3DS photo splitter by OSA413&quot;)
        ///    print(&quot;Enter path to MPO file&quot;)
        ///    file_name = input(&quot;&gt;&gt;&gt; &quot;)
        ///else:
        ///    file_name = sys.argv[1]
        ///
        ///with open(file_name, &quot;rb&quot;) as f:
        ///    a = f.read()
        ///
        ///split_ind = -1
        ///
        ///for i in range(len(a) - 2):
        ///    #This is Exif thing at the beginning of a JPG file
        ///   [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string _3DS_photo_splitter {
            get {
                return ResourceManager.GetString("_3DS_photo_splitter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #This program finds and deletes duplicates of files in a given directory
        ///import os, hashlib, sys, glob
        ///
        ///__author__ = &quot;OSA413&quot;
        ///__license__ = &quot;MIT License&quot;
        ///__source__ = &quot;https://github.com/OSA413/Garbage&quot;
        ///
        ///def delete_this(path=&quot;$cwd&quot;, make_sorted=False):
        ///    if path == &quot;$cwd&quot;:
        ///        path = os.getcwd()
        ///
        ///    file_list = [x for x in glob.glob(path + &quot;/**/*&quot;, recursive = True) if os.path.isfile(x)]
        ///    if make_sorted: file_list.sort()
        ///    shas = set()
        ///    print(len(file_list))
        ///    
        ///    for i in file_list:
        ///      [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string dups_deleter {
            get {
                return ResourceManager.GetString("dups_deleter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &quot;&quot;&quot;
        ///Some model converters may leave unused materials in MTL files.
        ///This program leave only used materials from OBJ file in MTL file.
        ///
        ///How to use: enter the full path to the .obj and .mtl files without the file
        ///extension.
        ///    e.g.
        ///        if the full path to the model is &quot;D:\models\test.obj&quot; and
        ///        &quot;D:\models\test.mtl&quot;, enter &quot;D:\models\test&quot;.
        ///&quot;&quot;&quot;
        ///import re
        ///
        ///def get_materials(path):
        ///    with open(str(path)+&quot;.obj&quot;,&quot;r&quot;) as f:
        ///        model = f.read()
        ///
        ///    materials_list = list(set(re.findall(r&quot;usemtl .+?\ [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string mtl_material_cutter {
            get {
                return ResourceManager.GetString("mtl_material_cutter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &quot;&quot;&quot;
        ///Copies textures that are used in MTL material file into a separated folder
        ///&quot;%file_name% used textures&quot; where the MTL file is placed.
        ///Usage: enter the full path to the MTL file.
        ///&quot;&quot;&quot;
        ///import re
        ///import os
        ///import shutil
        ///
        ///def get_textures(mtl_file):
        ///    with open(mtl_file,&quot;r&quot;) as f:
        ///        material = f.read()
        ///        
        ///    texture_list = list(set(re.findall(r&quot;Map_Kd .+?\n&quot;,material)))
        ///    for i in range(len(texture_list)):
        ///        texture_list[i] = texture_list[i][7:-1]
        ///
        ///    return texture_list
        ///
        ///def separate( [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string mtl_texture_separator {
            get {
                return ResourceManager.GetString("mtl_texture_separator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &quot;&quot;&quot;
        ///This program fixes .obj files that contain &quot;#&quot; at the end of the lines
        ///    e.g. &quot;v 0 0.05 5.599998 #1&quot;
        ///and commas instead of dots in .mtl files.
        ///    e.g. &quot;d 0,69803923368454&quot;
        ///
        ///How to use: enter the full path to the .obj and .mtl files without the file
        ///extension.
        ///    e.g.
        ///        if the full path to the model is &quot;D:\game\models\test.obj&quot; and
        ///        &quot;D:\game\models\test.mtl&quot;, enter &quot;D:\game\models\test&quot;.
        ///
        ///If .obj or .mtl is missed, it will be skipped.
        ///&quot;&quot;&quot;
        ///
        ///def fix_obj(path):
        ///    with open(str(path)+&quot;.obj [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string obj_fixer {
            get {
                return ResourceManager.GetString("obj_fixer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &quot;&quot;&quot;
        ///(Not so, actually) Universal process killer
        ///Rewritten to be used as a module.
        ///&quot;&quot;&quot;
        ///import os
        ///import sys
        ///
        ///def kill_process(process_name):
        ///    #Security fix
        ///    process_name = process_name.split(&quot; &quot;)[0].split(&quot;;&quot;)[0]
        ///
        ///    #For Windows
        ///    if sys.platform == &quot;win32&quot;:
        ///        os.popen(&quot;taskkill /IM &quot;+str(process_name)+&quot;.exe /F&quot;)
        ///        #.bin is used in some programs (e.g. LibreOffice)
        ///        os.popen(&quot;@echo off\ntaskkill /IM &quot;+str(process_name)+&quot;.bin /F&quot;)
        ///    #For Linux (tested on Ubuntu)
        ///    elif &quot;linux&quot;  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string process_killer {
            get {
                return ResourceManager.GetString("process_killer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #This thing will take all svg files from a file (e.g. otf)
        ///#Because this program is too simple I release it under the CC0 license
        ///#https://github.com/OSA413/Garbage
        ///
        ///import sys
        ///
        ///#The nodes of SVG&apos;s XML
        ///SVG_START = b&quot;\x3C\x73\x76\x67&quot;
        ///SVG_END   = b&quot;\x3C\x2F\x73\x76\x67&quot;
        ///
        ///file_name = &quot;&quot;
        ///if (len(sys.argv) == 1):
        ///    print(&quot;SVG take out by OSA413&quot;)
        ///    print(&quot;Enter path to a file&quot;)
        ///    file_name = input(&quot;&gt;&gt;&gt; &quot;)
        ///else:
        ///    file_name = sys.argv[1]
        ///
        ///with open(file_name, &quot;rb&quot;) as f:
        ///    a = f.read()
        ///
        ///pointer_svg_sta [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string SVG_take_out {
            get {
                return ResourceManager.GetString("SVG_take_out", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #Tic Tac Toe text version by OSA413
        ///#github.com/OSA413/tic-tac-text
        ///
        ///__author__ = &quot;OSA413&quot;
        ///__version__ = &quot;1.0.1.20&quot;
        ///__license__ = &quot;MIT License&quot;
        ///
        ///import random
        ///import re
        ///import sys
        ///import os
        ///import time
        ///import urllib.request
        ///import zipfile
        ///from sys import exit
        ///
        ///#input() UnicodeDecodeError &quot;fix&quot;
        ///inputt = input
        ///def input(x=&quot;&quot;):
        ///    try:
        ///        return inputt(x)
        ///    except EOFError:
        ///        exit()
        ///    except:
        ///        return &quot;&quot;
        ///
        ///#Shortcut of urllib.request.urlopen
        ///def url_open(url , timeout = 0):
        ///    return urll [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string tic_tac_text {
            get {
                return ResourceManager.GetString("tic_tac_text", resourceCulture);
            }
        }
    }
}
